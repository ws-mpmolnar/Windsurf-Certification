# name: Python Tests with Devin Triage

# on:
#   push:
#     branches: [ "main", "develop" ]
#   pull_request:
#     branches: [ "main", "develop" ]
#   workflow_dispatch:

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     outputs:
#       test_failed: ${{ steps.test_status.outputs.test_failed }}
#     defaults:
#       run:
#         working-directory: ./contact-form-app/backend
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.9'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Run tests with pytest
#         id: pytest
#         run: |
#           # Run pytest with verbose output and capture results
#           pytest -v --tb=short > test_results.txt 2>&1
#         continue-on-error: true

#       - name: Check test results
#         id: test_status
#         run: |
#           if [ ${{ steps.pytest.outcome }} == "success" ]; then
#             echo "Tests passed successfully"
#             echo "test_failed=false" >> $GITHUB_OUTPUT
#           else
#             echo "Tests failed"
#             echo "test_failed=true" >> $GITHUB_OUTPUT
#           fi

#       - name: Upload test results
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: contact-form-app/backend/test_results.txt

#   trigger-devin-on-failure:
#     needs: test
#     runs-on: ubuntu-latest
#     if: needs.test.outputs.test_failed == 'true'
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Download test results
#         uses: actions/download-artifact@v4
#         with:
#           name: test-results
#           path: ./

#       - name: Trigger Devin Session for Test Failure
#         id: trigger-devin
#         # This step sends a request to the Devin API to create a new session for test triage
#         run: |
#           # Extract relevant information from the test failure
#           COMMIT_SHA="${{ github.sha }}"
#           BRANCH_NAME="${{ github.ref_name }}"
#           WORKFLOW_RUN_ID="${{ github.run_id }}"
          
#           # Read test results if available
#           TEST_OUTPUT=""
#           if [ -f "test_results.txt" ]; then
#             TEST_OUTPUT=$(cat test_results.txt | head -50)  # Limit output to first 50 lines
#           fi
          
#           # Create a JSON payload for the Devin API
#           # Create JSON payload for Devin API v1 with required prompt and playbook_id fields
#           JSON_PAYLOAD=$(cat << EOF
#           {
#             "prompt": "Triage Python test failures in contact-form-app/backend - Commit: $COMMIT_SHA\n\nRepository: ${{ github.server_url }}/${{ github.repository }}\nBranch: $BRANCH_NAME\nWorkflow Run: $WORKFLOW_RUN_ID\nWorking Directory: contact-form-app/backend\nTest Command: pytest -v --tb=short\n\nTest Output:\n$TEST_OUTPUT",
#             "playbook_id": "playbook-0dfd97ea32d94337b2507ba897c47b21"
#           }
#           EOF
#           )
          
#           # Send request to Devin API v1
#           # Check that the DEVIN_API_KEY secret exists before making the API call
#           if [[ -n "${{ secrets.DEVIN_API_KEY }}" ]]; then
#             echo "🔍 API Key detected (length: ${#DEVIN_API_KEY})"
#             echo "🔍 First 10 characters: ${DEVIN_API_KEY:0:10}"
            
#             # Capture the API response with detailed error output
#             echo "📡 Making API call to Devin..."
#             RESPONSE=$(curl -X POST "https://api.devin.ai/v1/sessions" \
#               -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}" \
#               -H "Content-Type: application/json" \
#               -d "$JSON_PAYLOAD" \
#               --fail --silent --show-error)
            
#             CURL_EXIT_CODE=$?
#             echo "📊 Curl exit code: $CURL_EXIT_CODE"
            
#             if [ $CURL_EXIT_CODE -ne 0 ]; then
#               echo "❌ API call failed. Trying again with verbose output for debugging..."
#               curl -X POST "https://api.devin.ai/v1/sessions" \
#                 -H "Authorization: Bearer ${{ secrets.DEVIN_API_KEY }}" \
#                 -H "Content-Type: application/json" \
#                 -d "$JSON_PAYLOAD" \
#                 --verbose
#               exit 1
#             fi
            
#             # Extract session URL from response using jq or basic parsing
#             SESSION_URL=$(echo "$RESPONSE" | grep -o '"url":"[^"]*"' | cut -d'"' -f4)
#             SESSION_ID=$(echo "$RESPONSE" | grep -o '"session_id":"[^"]*"' | cut -d'"' -f4)
            
#             echo "✅ Successfully triggered Devin session for test failure"
#             echo "📋 Commit: $COMMIT_SHA"
#             echo "🔗 Devin Session URL: $SESSION_URL"
#             echo "🆔 Session ID: $SESSION_ID"
            
#             # Set outputs for use in other steps
#             echo "devin_session_url=$SESSION_URL" >> $GITHUB_OUTPUT
#             echo "devin_session_id=$SESSION_ID" >> $GITHUB_OUTPUT
#           else
#             echo "Error: Requires Devin API key"
#             exit 1
#           fi

#       - name: Comment on PR with Devin session info
#         if: github.event_name == 'pull_request'
#         uses: actions/github-script@v6
#         with:
#           script: |
#             const devinUrl = '${{ steps.trigger-devin.outputs.devin_session_url }}';
#             const sessionId = '${{ steps.trigger-devin.outputs.devin_session_id }}';
            
#             let body = '🤖 **Test Failure Detected**\n\nPython tests failed in `contact-form-app/backend`. A Devin session has been automatically triggered to triage the issue.';
            
#             if (devinUrl) {
#               body += `\n\n🔗 **[Open Devin Session](${devinUrl})**\n📋 Session ID: \`${sessionId}\``;
#             }
            
#             body += `\n\n**Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: body
#             });
            
#             console.log('Posted PR comment with Devin session info');
#             if (devinUrl) {
#               console.log('Devin Session URL:', devinUrl);
#             }
